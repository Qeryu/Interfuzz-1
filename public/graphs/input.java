// Generated by Java* Fuzzer test generator (1.0.001). Sun Jan 14 00:00:55 2024
public class Test9257 {

    public static final int N = 256;

    public static long instanceCount=-35793L;
    public byte byFld=-50;
    public double dFld=124.7373;
    public int iFld=-14;
    public int iFld1=8;
    public static long[] lArrFld =new long[N];
    public int[] iArrFld =new int[N];

    static {
        FuzzerUtils.init(Test9257.lArrFld, 176L);
    }

    public static long vMeth_check_sum = 0;
    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static void vMeth(float f) {


        Test9257.instanceCount *= -40260;
        vMeth_check_sum += Float.floatToIntBits(f);
    }

    public static int iMeth1(int i5, boolean b, int i6) {

        int i7=-2;
        int i8=-9;
        int i9=-1539;
        int i10=-10672;
        int i11=8;
        int i12=40644;
        int i13=1;
        int[] iArr =new int[N];
        double d=-1.24374;
        float f3=-2.817F;
        short s1=-24080;
        byte by=125;

        FuzzerUtils.init(iArr, 3);

        i5 *= -5;
        switch (((i5 >>> 1) % 1) + 117) {
        case 117:
            for (i7 = 2; i7 < 5; ++i7) {
                i8 = (int)d;
                for (i9 = 1; i9 < 4; i9++) {
                    Test9257.instanceCount += i9;
                    i8 -= (int)Test9257.instanceCount;
                    i10 = (int)Test9257.instanceCount;
                }
                i11 = 1;
                do {
                    try {
                        iArr[i7 - 1] = (i7 % i11);
                        iArr[(i12 >>> 1) % N] = (i8 % 246);
                        iArr[i11] = (i8 % i10);
                    } catch (ArithmeticException a_e) {}
                    i12 += i11;
                    iArr[i7] *= (int)Test9257.instanceCount;
                    i13 = 1;
                    while (++i13 < 1) {
                        i12 += (-134 + (i13 * i13));
                        f3 = s1;
                        d += 1594;
                        switch ((((i9 >>> 1) % 2) * 5) + 99) {
                        case 103:
                            b = b;
                            Test9257.instanceCount += i13;
                            if (b) continue;
                            i6 -= i11;
                            if (b) continue;
                            d -= i13;
                            by = (byte)i8;
                            b = b;
                            i10 += (i13 * i13);
                            if (b) continue;
                            Test9257.instanceCount *= (long)2.916F;
                            d = Test9257.instanceCount;
                            i10 -= (int)Test9257.instanceCount;
                            by += (byte)(8250611372664101936L + (i13 * i13));
                            break;
                        case 102:
                            f3 += f3;
                            i6 = i7;
                            switch ((i7 % 8) + 15) {
                            case 15:
                                i12 = (int)Test9257.instanceCount;
                                i12 += (i13 * i13);
                                iArr[i13 + 1] -= i5;
                                break;
                            case 16:
                                i10 += -27911;
                                break;
                            case 17:
                                i5 += i13;
                            case 18:
                                i6 *= (int)3353593966L;
                                break;
                            case 19:
                                i10 >>= (int)Test9257.instanceCount;
                                break;
                            case 20:
                                i8 = i12;
                                break;
                            case 21:
                                i5 *= i13;
                                break;
                            case 22:
                                iArr[i11 - 1] = by;
                                break;
                            default:
                                Test9257.instanceCount <<= i12;
                            }
                        default:
                            i6 = (int)Test9257.instanceCount;
                        }
                    }
                } while (++i11 < 4);
            }
            break;
        }
        long meth_res = i5 + (b ? 1 : 0) + i6 + i7 + i8 + Double.doubleToLongBits(d) + i9 + i10 + i11 + i12 + i13 +
            Float.floatToIntBits(f3) + s1 + by + FuzzerUtils.checkSum(iArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(float f2) {

        int i4=12243;
        short s=-17953;
        byte by1=61;

        i4 += (int)(f2 + (s ^= (short)(Test9257.instanceCount * Test9257.instanceCount)));
        i4 = iMeth1(i4, false, i4);
        Test9257.instanceCount >>>= by1;
        long meth_res = Float.floatToIntBits(f2) + i4 + s + by1;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vSmallMeth(int i2, int i3) {

        float f4=-74.93F;

        vMeth(i3 - (i2 <<= (5 - iMeth(f4))));
        i3 += (int)f4;
        vSmallMeth_check_sum += i2 + i3 + Float.floatToIntBits(f4);
    }

    public void mainTest(String[] strArr1) {

        float f1=119.646F;
        float[] fArr =new float[N];
        int i=14, i1=-1, i14=51031, i15=92, i16=30174, i17=57976, i18=-174, i19=-237;
        double d1=-2.81540, d2=-21.70152;
        boolean b1=true;
        short s2=10210;
        byte[][] byArr =new byte[N][N];

        FuzzerUtils.init(fArr, 0.970F);
        FuzzerUtils.init(byArr, (byte)-9);

        vMeth(f1);
        for (i = 12; i < 15; ++i) {
            i1 = (int)((i * Test9257.instanceCount) * (i1++));
            f1 += (-9 + (i * i));
        }
        Test9257.lArrFld[(-46 >>> 1) % N] += (i1++);
        for (int smallinvoc=0; smallinvoc<104; smallinvoc++) vSmallMeth(i, -48803);
        i14 = 1;
        do {
            i1 -= i;
            Test9257.lArrFld[i14] *= i;
            for (d1 = 1; d1 < 4; ++d1) {
                iArrFld[i14 - 1] ^= -41;
                i1 += i15;
                f1 += (float)(((d1 * i15) + byFld) - i1);
                dFld -= i15;
                Test9257.lArrFld[(int)(d1 + 1)] <<= -9;
                iArrFld[(int)(d1 - 1)] += i1;
                i15 += (int)(((d1 * i15) + i14) - f1);
                i1 += (int)(((d1 * i14) + i) - i1);
                Test9257.lArrFld[(int)(d1 + 1)] = Test9257.instanceCount;
                i1 = i14;
                if (false) continue;
                if (b1) continue;
                i15 += (int)dFld;
                i1 += (int)Test9257.instanceCount;
            }
            d2 = 55;
            while (--d2 > 0) {
                f1 /= (float)122.52998;
                for (i16 = 1; i16 > -2; --i16) {
                    Test9257.lArrFld[(int)(d2 - 1)] += (long)-2.81F;
                    i1 -= 17483;
                    switch ((i16 % 2) + 108) {
                    case 108:
                        i1 -= byFld;
                        i15 += (int)Test9257.instanceCount;
                        f1 += 2;
                        Test9257.instanceCount += (long)d1;
                        if (b1) break;
                        b1 = b1;
                        i1 += (int)-4137195794L;
                        i17 += i16;
                        break;
                    case 109:
                        iArrFld[(int)(d2)] += (int)d2;
                        Test9257.instanceCount += Test9257.instanceCount;
                        s2 = (short)i17;
                        Test9257.instanceCount += i16;
                        Test9257.instanceCount = i15;
                        i17 += i16;
                        i17 -= (int)d1;
                        i17 = i14;
                        Test9257.instanceCount >>= i17;
                        break;
                    default:
                        byFld ^= (byte)i17;
                        i1 += i16;
                        Test9257.lArrFld[(int)(d2)] += i;
                        i1 >>= i1;
                        try {
                            i15 = (-43386 % i1);
                            iArrFld[i16] = (i1 / 12);
                            i17 = (-34555 / i);
                        } catch (ArithmeticException a_e) {}
                        Test9257.instanceCount = i15;
                        Test9257.instanceCount += (-6221411612675516858L + (i16 * i16));
                        i17 += (int)d1;
                    }
                    i1 = 29617;
                    Test9257.instanceCount -= (long)-1.495F;
                    i15 += (i16 ^ i14);
                    iArrFld[i16 - 1] += (int)-42120L;
                    i1 *= i1;
                }
                Test9257.instanceCount = Test9257.instanceCount;
                i17 <<= i14;
                i15 += (int)d2;
                dFld *= i16;
                byArr[i14 + 1][i14 - 1] = (byte)Test9257.instanceCount;
                iArrFld[(int)(d2 - 1)] *= i14;
                Test9257.instanceCount *= i15;
                for (i18 = 1; i18 < 4; ++i18) {
                    Test9257.instanceCount <<= i16;
                    iArrFld = FuzzerUtils.int1array(N, (int)-14);
                    try {
                        iFld = (-57386 % i18);
                        i1 = (-232 / i1);
                        iFld = (iArrFld[i18] / -402763552);
                    } catch (ArithmeticException a_e) {}
                    iFld *= i14;
                    i17 += i18;
                    i15 = iFld1;
                    iFld <<= (int)Test9257.instanceCount;
                }
            }
        } while (++i14 < 92);

        FuzzerUtils.out.println("f1 i i1 = " + Float.floatToIntBits(f1) + "," + i + "," + i1);
        FuzzerUtils.out.println("i14 d1 i15 = " + i14 + "," + Double.doubleToLongBits(d1) + "," + i15);
        FuzzerUtils.out.println("b1 d2 i16 = " + (b1 ? 1 : 0) + "," + Double.doubleToLongBits(d2) + "," + i16);
        FuzzerUtils.out.println("i17 s2 i18 = " + i17 + "," + s2 + "," + i18);
        FuzzerUtils.out.println("i19 fArr byArr = " + i19 + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            "," + FuzzerUtils.checkSum(byArr));

        FuzzerUtils.out.println("Test9257.instanceCount byFld dFld = " + Test9257.instanceCount + "," + byFld + "," +
            Double.doubleToLongBits(dFld));
        FuzzerUtils.out.println("iFld iFld1 Test9257.lArrFld = " + iFld + "," + iFld1 + "," +
            FuzzerUtils.checkSum(Test9257.lArrFld));
        FuzzerUtils.out.println("iArrFld = " + FuzzerUtils.checkSum(iArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test9257 _instance = new Test9257();
            for (int i = 0; i < 1; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest vSmallMeth Test
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vSmallMeth mainTest Test
//DEBUG  iMeth1 ->  iMeth1 iMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
